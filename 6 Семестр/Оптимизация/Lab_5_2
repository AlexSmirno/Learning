import random
import numpy as np
from math import sqrt
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x1_list = []
x2_list = []
y_list = []
counter = 0

def show(x1_list, x2_list):
    N = int(x1_list.__len__())
    if (N <= 0):
        return

    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})

    x1_array = np.arange(min(x1_list) - 1, max(x1_list) + 1, 0.1)
    x2_array = np.arange(min(x2_list) - 1, max(x2_list) + 1, 0.1)

    x1_array, x2_array = np.meshgrid(x1_array, x2_array)
    R = f(x1_array, x2_array)


    ax.set_xlabel('x1')
    ax.set_ylabel('x2')
    ax.set_zlabel('f(x1,x2)')   
    ax.plot_surface(x1_array, x2_array, R, color='b', alpha=0.5) 
    
    x1_list2 = []
    x2_list2 = []
    f_list = []

    ax.scatter(x1_list[0], x2_list[0], f(x1_list[0], x2_list[0]), c='black')
    x1_list2.append(x1_list[0])
    x2_list2.append(x2_list[0])
    f_list.append(f(x1_list[0], x2_list[0]))

    for n in range(1, N - 1):
        ax.scatter(x1_list[n], x2_list[n], f(x1_list[n], x2_list[n]), c='red')
        x1_list2.append(x1_list[n])
        x2_list2.append(x2_list[n])
        f_list.append(f(x1_list[n], x2_list[n]))

    ax.scatter(x1_list[N - 1], x2_list[N - 1], f(x1_list[N - 1], x2_list[N - 1]), c='green')
    x1_list2.append(x1_list[N - 1])
    x2_list2.append(x2_list[N - 1])
    f_list.append(f(x1_list[N - 1], x2_list[n]))

    ax.plot(x1_list2, x2_list2, f_list, color="black")

    plt.show()

x0_nplist = np.array(0)
x1_nplist = np.array(0)
x2_nplist = np.array(0)

def f(x1, x2):
    global counter; counter += 1
    return 3*x1**4 - x1*x2 + x2**4 - 7*x1 - 8*x2 + 2

def find_s(x1, x2, a, h):
    global counter; counter += 2
    return (f(x1 + a*h[0], x2 + a*h[1]) - f(x1, x2)) / a

def rand(n):
    return random.randint(0, n)

def calc_r(a, n):
    return a * (sqrt(n + 1) - 1 + n) / (n * sqrt(2))

def calc_s(a, n):
    return a * (sqrt(n + 1) - 1) / (n * sqrt(2))

def dist(x1, x2):
    return sqrt((x1[0] - x2[0])**2 + (x1[1] - x2[1])**2)

def simplexnyi_method(x0, x1, x2, a, n):
    x_pred = np.array([0,0])
    k = 0

    while (dist(x0, x1) or dist(x1, x2) or dist(x2, x0)):
        f0 = f(x0[0], x0[1])
        f1 = f(x1[0], x2[1])
        f2 = f(x2[0], x2[1])

        x_next = np.array([0,0])
        x_pred_new = np.array([0,0])
        if (f0 >= f1) & (f0 >= f2) : x_next = (2/n) * (x1 + x2) - x0; x_pred_new = x0
        if (f1 >= f0) & (f1 >= f2) : x_next = (2/n) * (x0 + x2) - x1; x_pred_new = x1
        if (f2 >= f1) & (f2 >= f0) : x_next = (2/n) * (x0 + x1) - x2; x_pred_new = x2

        if (x_next.all() != x_pred.all()): x_pred = x_pred_new; continue;

        a /= 2
        x0 = x_pred_new
        x1 = np.array([x0[0] + calc_r(a, n), x0[1] + calc_s(a, n)])
        x2 = np.array([x0[0] + calc_s(a, n), x0[1] + calc_r(a, n)])
        k += 1
    point = np.array([(x0[0]+x1[0]+x2[0]) / 3, (x0[1]+x1[1]+x2[1]) / 3])
                     
    return [(point, f(point[0], point[1])), k]



round_num = 3
e = 0.0001
a = 1
n = 3

x0 = np.array([3, 4])
x1 = np.array([x0[0] + calc_r(a, n), x0[1] + calc_s(a, n)])
x2 = np.array([x0[0] + calc_s(a, n), x0[1] + calc_r(a, n)])

result = simplexnyi_method(x0, x1, x2, a, n)
print(f"Simplexnyi method: {result[0]}; count of iteractions = {result[1]}")
print('Count of compute function =', counter)


